{"ast":null,"code":"import axios from 'axios';\nconst API_BASE_URL = 'http://localhost:5000/api';\n\n// Create axios instance\nconst api = axios.create({\n  baseURL: API_BASE_URL\n});\n\n// Add token to requests\napi.interceptors.request.use(config => {\n  const token = localStorage.getItem('token');\n  if (token) {\n    config.headers.Authorization = `Bearer ${token}`;\n  }\n  return config;\n});\n\n// Handle token expiration\napi.interceptors.response.use(response => response, error => {\n  var _error$response;\n  if (((_error$response = error.response) === null || _error$response === void 0 ? void 0 : _error$response.status) === 401) {\n    localStorage.removeItem('token');\n    localStorage.removeItem('user');\n    window.location.reload();\n  }\n  return Promise.reject(error);\n});\n\n// Auth API\nexport const authAPI = {\n  login: async credentials => {\n    const response = await api.post('/auth/login', credentials);\n    return response.data;\n  },\n  register: async userData => {\n    const response = await api.post('/auth/register', userData);\n    return response.data;\n  }\n};\n\n// Todo API\nexport const todoAPI = {\n  getTodos: async () => {\n    const response = await api.get('/todos');\n    return response.data;\n  },\n  createTodo: async todo => {\n    const response = await api.post('/todos', todo);\n    return response.data;\n  },\n  updateTodo: async (id, todo) => {\n    const response = await api.put(`/todos/${id}`, todo);\n    return response.data;\n  },\n  deleteTodo: async id => {\n    const response = await api.delete(`/todos/${id}`);\n    return response.data;\n  }\n};\nexport default api;","map":{"version":3,"names":["axios","API_BASE_URL","api","create","baseURL","interceptors","request","use","config","token","localStorage","getItem","headers","Authorization","response","error","_error$response","status","removeItem","window","location","reload","Promise","reject","authAPI","login","credentials","post","data","register","userData","todoAPI","getTodos","get","createTodo","todo","updateTodo","id","put","deleteTodo","delete"],"sources":["C:/Users/kisha/todo-app-testing/frontend/src/services/api.js"],"sourcesContent":["import axios from 'axios';\r\n\r\nconst API_BASE_URL = 'http://localhost:5000/api';\r\n\r\n// Create axios instance\r\nconst api = axios.create({\r\n  baseURL: API_BASE_URL,\r\n});\r\n\r\n// Add token to requests\r\napi.interceptors.request.use((config) => {\r\n  const token = localStorage.getItem('token');\r\n  if (token) {\r\n    config.headers.Authorization = `Bearer ${token}`;\r\n  }\r\n  return config;\r\n});\r\n\r\n// Handle token expiration\r\napi.interceptors.response.use(\r\n  (response) => response,\r\n  (error) => {\r\n    if (error.response?.status === 401) {\r\n      localStorage.removeItem('token');\r\n      localStorage.removeItem('user');\r\n      window.location.reload();\r\n    }\r\n    return Promise.reject(error);\r\n  }\r\n);\r\n\r\n// Auth API\r\nexport const authAPI = {\r\n  login: async (credentials) => {\r\n    const response = await api.post('/auth/login', credentials);\r\n    return response.data;\r\n  },\r\n  \r\n  register: async (userData) => {\r\n    const response = await api.post('/auth/register', userData);\r\n    return response.data;\r\n  }\r\n};\r\n\r\n// Todo API\r\nexport const todoAPI = {\r\n  getTodos: async () => {\r\n    const response = await api.get('/todos');\r\n    return response.data;\r\n  },\r\n  \r\n  createTodo: async (todo) => {\r\n    const response = await api.post('/todos', todo);\r\n    return response.data;\r\n  },\r\n  \r\n  updateTodo: async (id, todo) => {\r\n    const response = await api.put(`/todos/${id}`, todo);\r\n    return response.data;\r\n  },\r\n  \r\n  deleteTodo: async (id) => {\r\n    const response = await api.delete(`/todos/${id}`);\r\n    return response.data;\r\n  }\r\n};\r\n\r\nexport default api;"],"mappings":"AAAA,OAAOA,KAAK,MAAM,OAAO;AAEzB,MAAMC,YAAY,GAAG,2BAA2B;;AAEhD;AACA,MAAMC,GAAG,GAAGF,KAAK,CAACG,MAAM,CAAC;EACvBC,OAAO,EAAEH;AACX,CAAC,CAAC;;AAEF;AACAC,GAAG,CAACG,YAAY,CAACC,OAAO,CAACC,GAAG,CAAEC,MAAM,IAAK;EACvC,MAAMC,KAAK,GAAGC,YAAY,CAACC,OAAO,CAAC,OAAO,CAAC;EAC3C,IAAIF,KAAK,EAAE;IACTD,MAAM,CAACI,OAAO,CAACC,aAAa,GAAG,UAAUJ,KAAK,EAAE;EAClD;EACA,OAAOD,MAAM;AACf,CAAC,CAAC;;AAEF;AACAN,GAAG,CAACG,YAAY,CAACS,QAAQ,CAACP,GAAG,CAC1BO,QAAQ,IAAKA,QAAQ,EACrBC,KAAK,IAAK;EAAA,IAAAC,eAAA;EACT,IAAI,EAAAA,eAAA,GAAAD,KAAK,CAACD,QAAQ,cAAAE,eAAA,uBAAdA,eAAA,CAAgBC,MAAM,MAAK,GAAG,EAAE;IAClCP,YAAY,CAACQ,UAAU,CAAC,OAAO,CAAC;IAChCR,YAAY,CAACQ,UAAU,CAAC,MAAM,CAAC;IAC/BC,MAAM,CAACC,QAAQ,CAACC,MAAM,CAAC,CAAC;EAC1B;EACA,OAAOC,OAAO,CAACC,MAAM,CAACR,KAAK,CAAC;AAC9B,CACF,CAAC;;AAED;AACA,OAAO,MAAMS,OAAO,GAAG;EACrBC,KAAK,EAAE,MAAOC,WAAW,IAAK;IAC5B,MAAMZ,QAAQ,GAAG,MAAMZ,GAAG,CAACyB,IAAI,CAAC,aAAa,EAAED,WAAW,CAAC;IAC3D,OAAOZ,QAAQ,CAACc,IAAI;EACtB,CAAC;EAEDC,QAAQ,EAAE,MAAOC,QAAQ,IAAK;IAC5B,MAAMhB,QAAQ,GAAG,MAAMZ,GAAG,CAACyB,IAAI,CAAC,gBAAgB,EAAEG,QAAQ,CAAC;IAC3D,OAAOhB,QAAQ,CAACc,IAAI;EACtB;AACF,CAAC;;AAED;AACA,OAAO,MAAMG,OAAO,GAAG;EACrBC,QAAQ,EAAE,MAAAA,CAAA,KAAY;IACpB,MAAMlB,QAAQ,GAAG,MAAMZ,GAAG,CAAC+B,GAAG,CAAC,QAAQ,CAAC;IACxC,OAAOnB,QAAQ,CAACc,IAAI;EACtB,CAAC;EAEDM,UAAU,EAAE,MAAOC,IAAI,IAAK;IAC1B,MAAMrB,QAAQ,GAAG,MAAMZ,GAAG,CAACyB,IAAI,CAAC,QAAQ,EAAEQ,IAAI,CAAC;IAC/C,OAAOrB,QAAQ,CAACc,IAAI;EACtB,CAAC;EAEDQ,UAAU,EAAE,MAAAA,CAAOC,EAAE,EAAEF,IAAI,KAAK;IAC9B,MAAMrB,QAAQ,GAAG,MAAMZ,GAAG,CAACoC,GAAG,CAAC,UAAUD,EAAE,EAAE,EAAEF,IAAI,CAAC;IACpD,OAAOrB,QAAQ,CAACc,IAAI;EACtB,CAAC;EAEDW,UAAU,EAAE,MAAOF,EAAE,IAAK;IACxB,MAAMvB,QAAQ,GAAG,MAAMZ,GAAG,CAACsC,MAAM,CAAC,UAAUH,EAAE,EAAE,CAAC;IACjD,OAAOvB,QAAQ,CAACc,IAAI;EACtB;AACF,CAAC;AAED,eAAe1B,GAAG","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}